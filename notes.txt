2022-02-21: ideas
	pipelined Mill-like
	+ cache hierarchy?
	+ prediction?
	+ metadata?

2022-02-23: more ideas
	name: Shed

	+ more execution units?
	+ split stream encoding?
	+ phasing?
	+ proper function calls? ×
	+ divide?
	+ scratchpad?

	1 execution unit
	load-store statically-scheduled
	belt
		TODO: elaborate

	assembler

2022-03-21: ISA
	code_addr ::= PC + sign_ext(imm)
	stack_addr ::= FP + imm
	data_addr ::= belt + sign_ext(imm)

	0 belt, 0 imm - 4 instrs
		halt
		nop
		return
		get_pc - lat1
	0 belt, 1 imm - 6 instrs
		constant sign_ext(imm) - lat1
		upper imm - lat1
		jump code_addr
		call code_addr
		read_stack stack_addr - lat1
		alloca imm
	1 belt, 0 imm - 5 instrs
		invert belt - lat1
		negate belt - lat1
		longcall belt
		longjump belt
		get_carry belt - lat1
	1 belt, 1 imm - 14 instrs
		addi belt, sign_ext(imm) - lat1
		muli belt, sign_ext(imm) - lat5?
		andi belt, sign_ext(imm) - lat1
		ori belt, imm - lat1
		xori belt, imm - lat1
		lshifti belt, imm - lat1
		rshifti belt, imm - lat1
		arshifti belt, imm - lat1
		branch_zero belt, code_addr
		branch_neg belt, code_addr
		branch_ofl belt, code_addr
		branch_car belt, code_addr
		write_stack belt, stack_addr
		load data_addr - lat1
	2 belt, 0 imm - 11 instrs
		add belt, belt - lat1
		addc belt, belt - lat1
		sub belt, belt - lat1
		subc belt, belt - lat1
		mul belt, belt - lat5?
		and belt, belt - lat1
		or belt, belt - lat1
		xor belt, belt - lat1
		lshift belt, belt - lat1
		rshift belt, belt - lat1
		arshift belt, belt - lat1
	2 belt, 1 imm - 1 instr
		store belt, data_addr

	signed or unsigned multiply?

2022-04-07
	alloca
		SP = SP + Imm

	call1
		PC = Addr
		SMem[SP + 1] = RA
		RA = PC + 2
	call2
		FP = SP + 3
		SMem[SP + 2] = FP
	
	return1
		FP = SMem[FP - 1]
		PC = RA
		SP = FP - 3
	return2
		RA = SMem[FP - 2]


	IF: PC
	X₁: FP, SP, RA
	X₂: RFP
	
	return1
		X₁
			PC = RA
		X₂
			RA = SMem[FP - 1]
	return2
		X₁
			FP = RFP
		X₂
			RFP = SMem[FP - 2]
	
	call1
		X₁
			PC = Addr
			RA = PC + 2
		X₂
			SMem[SP + 1] = RA
	call2
		X₁
			FP = SP + 3
			RFP = FP
		X₂
			SMem[SP + 2] = RFP
	
	return
		1-1: PC = RA
		2-2: RA = SMem[FP - 1]
		2-2: FP = RFP
		3-3: RFP = SMem[FP - 2]
		2-2: SP = FP - 2

       -1  0  1  2  3  4
		?  IF X₁ X₂
		R₁    IF X₁ X₂
		R₂       IF X₁ X₂
		?           IF X₁ X₂

		1
			PC = RA
		2
			RA = SMem[FP - 1]
			FP = RFP
			SP = FP - 2
		3
			RFP = SMem[FP - 2]
	
	call
		1-1: PC = Addr
		1-2: RA = PC + 2
		2-3: SMem[SP + 1] = RA
		2-2: FP = SP + 2
		1-3: RFP = FP
		2-3: SMem[SP] = RFP
		1-2: SP = SP + 2

       -1  0  1  2  3  4
		?  IF X₁ X₂
		C₁    IF X₁ X₂
		C₂       IF X₁ X₂
		?           IF X₁ X₂

		1
			PC = Addr
			SP = SP + 2
		2
			FP = SP + 3
			SMem[SP + 1] = RFP
		3
			SMem[SP + 2] = RA
	
	SP - next free position

2022-04-09
	IF: PC
	X₁: FP, RA
	X₂: SP, RFP

	call
		1-1: PC = Addr
		1-2: RA = PC + 2
		2-3: SMem[SP + 1] = RA
		2-2: FP = SP + 2
		1-3: RFP = FP
		2-3: SMem[SP] = RFP
		2-3: SP = SP + 2

        0  1  2  3  4
		C₁ IF X₁ X₂
		C₂    IF X₁ X₂
		?        IF X₁ X₂

		1
			PC = Addr
		2
			FP = SP + 2
			RFP = FP
			SMem[SP] = RFP
			SP = SP + 2
			RA = PC + 2
		3
			SMem[SP + 1] = RA

		1
			PC = Addr
		2
			RA = PC + 2
			SMem[SP + 1] = RA
			FP = SP + 2
			SP = SP + 2
		3
			RFP = FP
			SMem[SP] = RFP

		1
			PC = Addr
		2
			SMem.MAR = ALU2[SP + 1]
			FP = ALU2[SP + 1]
			SP = ALU2[SP + 1]
			Addr = ALU1[FP]

			RA = ALU1[PC X₁ + 1]
			SMem[SMem.MAR] = RA
			FP++
		3
			SMem.MAR = ALU2[SP]
			SP++

			RFP = ALU2[Addr]
			SMem[SMem.MAR] = RFP

	return
		1-1: PC = RA
		2-2: RA = SMem[FP - 1]
		2-2: FP = RFP
		3-3: RFP = SMem[FP - 2]
		1-3: SP = FP - 2

        0  1  2  3  4
		R₁ IF X₁ X₂
		R₂    IF X₁ X₂
		?        IF X₁ X₂

		1
			PC ← RA
			Addr ← ALU1[FP - 1]
		2
			SMem.MAR ← ALU2[Addr]
			RA ← SMem[FP - 1]
